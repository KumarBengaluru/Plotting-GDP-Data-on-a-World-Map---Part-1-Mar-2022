
import csv
import math
import pygal

def read_csv_as_nested_dict(filename, keyfield, separator, quote):
    """
    Inputs:
      filename  - name of CSV file
      keyfield  - field to use as key for rows
      separator - character that separates fields
      quote     - character used to optionally quote fields
    Output:
      Returns a dictionary of dictionaries where the outer dictionary
      maps the value in the key_field to the corresponding row in the
      CSV file.  The inner dictionaries map the field names to the
      field values for that row.
    """
    table = {}
    with open(filename, newline='') as csvfile:
        csvreader = csv.DictReader(csvfile, delimiter=separator, quotechar=quote)
        for row in csvreader:
            rowid = row[keyfield]
            table[rowid] = row
    return table

def reconcile_countries_by_name(plot_countries, gdp_countries):
    """
    Inputs:
      plot_countries - Dictionary whose keys are plot library country codes
                       and values are the corresponding country name
      gdp_countries  - Dictionary whose keys are country names used in GDP data

    Output:
      A tuple containing a dictionary and a set.  The dictionary maps
      country codes from plot_countries to country names from
      gdp_countries The set contains the country codes from
      plot_countries that were not found in gdp_countries.
    """
   
    dict = {}
    sets=set()
    
    for key, value2 in plot_countries.items():
        novalue=0       
        for value in gdp_countries:
           if value == value2:              
               dict[key] = value
               novalue=1
        
        
        if novalue == 0:
           sets.add(key)
    
    return dict,sets


def build_map_dict_by_name(gdpinfo, plot_countries, year):
    """
    Inputs:
      gdpinfo        - A GDP information dictionary
      plot_countries - Dictionary whose keys are plot library country codes
                       and values are the corresponding country name
      year           - String year to create GDP mapping for

    Output:
      A tuple containing a dictionary and two sets.  The dictionary
      maps country codes from plot_countries to the log (base 10) of
      the GDP value for that country in the specified year.  The first
      set contains the country codes from plot_countries that were not
      found in the GDP data file.  The second set contains the country
      codes from plot_countries that were found in the GDP data file, but
      have no GDP data for the specified year.
    """
    
    master_dict = read_csv_as_nested_dict(gdpinfo["gdpfile"], gdpinfo["country_name"], gdpinfo["separator"], gdpinfo["quote"])
    data1,data2=reconcile_countries_by_name(plot_countries, master_dict)
    
    dict={}
    data3=set()
    
    for key,value in data1.items():
        for value2 in master_dict:
            if value == value2:
                if master_dict[value][year] != '':
                    dict[key] = math.log10(float(master_dict[value][year]))
                else:
                    data3.add(key)


    return dict,data2,data3

def render_world_map(gdpinfo, plot_countries, year, map_file):
    """
    Inputs:
      gdpinfo        - A GDP information dictionary
      plot_countries - Dictionary whose keys are plot library country codes
                       and values are the corresponding country name
      year           - String year to create GDP mapping for
      map_file       - Name of output file to create

    Output:
      Returns None.

    Action:
      Creates a world map plot of the GDP data for the given year and
      writes it to a file named by map_file.
    """
    
    data1,data2,data3=build_map_dict_by_name(gdpinfo,plot_countries,year)
    worldmap_chart =  pygal.maps.world.World()
    worldmap_chart.title = 'GDP by country'
    worldmap_chart.add('GDP for '+year, data1)
    worldmap_chart.add('Missing from World Bank Data',data2)
    worldmap_chart.add('No GDP Data',data3)
    worldmap_chart.render_to_file(map_file)
    
    return
